paypal
sb-sbrku9183524@personal.example.com
pass
7s6jGE.Q





John
Doe
2047633723
EG
TULL3EGM2EAUJ





import React,{useState,useEffect} from "react";
import ReactDOM from 'react-dom';
import axios from 'axios';
import swal from 'sweetalert';
import {useHistory} from 'react-router-dom';
import '../../assets/frontend/css/checkout.css';
function Checkout() {
 const history=useHistory();
 const[loading,setLoadingCart]=useState(true);
  const[cart,setCart]=useState([]);
  const[error,setError]=useState([]);
  const [checkoutInput,setCheckout]=useState({
    firstname:'',
    lastname:'',
    phone:'',
    email:'',
    address:'',
    city:'',
    state:'',
    zipcode:'',
    error_list:''
  });
  useEffect(()=>{
    
    axios.get(`/api/get-cart`).then(res=>{
      if(res.data.status===200){
       setCart(res.data.cart);
      }
      setLoadingCart(false)
   });
},[]);


if(loading){
    return(<div className='fixed'>
            <div class="lds-ring"><div></div><div></div><div></div><div></div></div>
         </div>
    )
     
}  

const total=()=>{
  var totalprice=0;
  cart.map(item=>{
    totalprice+=item.product.sellingPrice==0?item.product.originalPrice*item.product_qty:item.product.sellingPrice*item.product_qty
  })
  return totalprice;
}

const handleInput=(e)=>{
    e.persist();
    setCheckout({...checkoutInput,[e.target.name]:e.target.value})
  }

  var orderinfo_data={
    firstname:checkoutInput.firstname,
    lastname:checkoutInput.lastname,
    phone:checkoutInput.phone,
    email:checkoutInput.email,
    address:checkoutInput.address,
    city:checkoutInput.city,
    state:checkoutInput.state,
    zipcode:checkoutInput.zipcode,
    payment_mode:'paid by paypal',
    payment_id:'',
}
const PayPalButton = window.paypal.Buttons.driver("react", { React, ReactDOM });
const createOrder = (data, actions) =>{

    return actions.order.create({

      purchase_units: [

        {

          amount: {

            //value: total(),
            value:'0.1'

          },

        },

      ],

    });

  };


  const onApprove = (data, actions) => {
        axios.post('/api/place-order',orderinfo_data).then(res=>{
            if(res.data.status===200){
                swal('Success',res.data.message,'Success');
                setError([]);
                history.push('/thankyou')
            
            }else if(res.data.status==400){
            swal('Error','All Field Are Mandetory','error');
                setError(res.data.errors)
            
            }
        });
       // return actions.order.capture();

    // return actions.order.capture().then(function(details){
    //     console.warn('details');
    //     orderinfo_data.payment_id=details.id;
    //     axios.post('/api/place-order',orderinfo_data).then(res=>{
    //         if(res.data.status===200){
    //             swal('Success',res.data.message,'Success');
    //             setError([]);
    //             history.push('/thankyou')
            
    //         }else if(res.data.status==400){
    //         swal('Error','All Field Are Mandetory','error');
    //             setError(res.data.errors)
            
    //         }
    //     });
    // })

  };
const submitOrder=(e,payment_mode)=>{
    e.preventDefault();
    const data={
        firstname:checkoutInput.firstname,
        lastname:checkoutInput.lastname,
        phone:checkoutInput.phone,
        email:checkoutInput.email,
        address:checkoutInput.address,
        city:checkoutInput.city,
        state:checkoutInput.state,
        zipcode:checkoutInput.zipcode,
        payment_mode:payment_mode,
        payment_id:'',
    }

    switch(payment_mode){
        case 'cod':
            axios.post('/api/place-order',data).then(place_res=>{
                if(place_res.data.status===200){
                    swal('Success',place_res.data.message,'Success');
                    setError([]);
                    history.push('/thankyou')
                
                }else if(place_res.data.status==400){
                swal('Error','All Field Are Mandetory','error');
                    setError(place_res.data.errors)
                
                }else if(place_res.data.status==401){
                    swal('Error',place_res.data.message,'error');            
                    }
            });
            break;
        case 'razorpay':
            axios.post('/api/validate-order',data).then(res=>{
                if(res.data.status===200){
                    setError([]);
                    var options = {
                        "key": "rzp_test_qqPYc7JEBeI0ii", // Enter the Key ID generated from the Dashboard
                        "amount": (1*100), // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
                        "name": "shrouk",
                        "description": "Test Transaction",
                        "image": "https://example.com/your_logo",
                        "handler": function (response){
                            console.log(response.razorpay_payment_id);
                            data.payment_id=response.razorpay_payment_id;
                            axios.post('/api/place-order',data).then(res=>{
                                if(res.data.status===200){
                                    swal('Success',res.data.message,'Success');
                                    setError([]);
                                    history.push('/thankyou')
                                
                                }
                            });
                        },
                        "prefill": {
                            "name": data.firstname+data.lastname,
                            "email": data.email,
                            "contact": data.phone
                        },
                        "theme": {
                            "color": "#3399cc"
                        }
                    };
                    var rzp1 = new window.Razorpay(options);
                    rzp1.open();

                   
                
                }else if(res.data.status==400){
                swal('Error','All Field Are Mandetory','error');
                    setError(res.data.errors)
                
                }else if(res.data.status==401){
                    swal('Error',res.data.message,'error');            
                    }
            });
            break;
            case 'payonline':
                axios.post('/api/validate-order',data).then(res=>{
                    if(res.data.status===200){
                        setError([]);
                        var myModal = new window.bootstrap.Modal(document.getElementById('payOnlineModal'));
                        myModal.show();
                    }else if(res.data.status==400){
                    swal('Error','All Field Are Mandetory','error');
                        setError(res.data.errors)
                    
                    }else if(res.data.status==401){
                        swal('Error',res.data.message,'error');            
                        }
                });
                break;
        default:
            break;
    }
  
}
const cartItems=cart.map(item=>{
    return(
   <tr>
       <td>{item.product.name}</td>
       <td>{item.product_qty}</td>
       <td>{item.product.sellingPrice==0?item.product.originalPrice:item.product.sellingPrice}</td>
       <td>{item.product.sellingPrice==0?item.product.originalPrice*item.product_qty:item.product.sellingPrice*item.product_qty}</td>
  
   </tr>
     
    )
})



  return (
    <>
   
            <div class="modal fade" id="payOnlineModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <hr/>
                    <PayPalButton
                            createOrder={(data, actions) => createOrder(data, actions)}
                            onApprove={(data, actions) => onApprove(data, actions)}
                    />
                </div>
                </div>
            </div>
            </div>
      <div className='checkout'>
      {
            cart.length!==0 ?
            (
         <div className='container'>
         <h2>CheckOut</h2>
           <div className='row'>
               <div className='col-md-7 fillform'>
                  <h3>Fill Form</h3>
                   <div className='row'>
                       <div className='col-md-6'>
                          <div className='form-group mb-3'>
                             <label> First Name </label>
                             <input type='text' name='firstname' onChange={handleInput}  value={checkoutInput.firstname} className='form-control' />
                             <small className='text-danger'>{error.firstname}</small>
                          </div>
                       </div>
                       <div className='col-md-6'>
                          <div className='form-group mb-3'>
                             <label> Last Name </label>
                             <input type='text' name='lastname' onChange={handleInput}  value={checkoutInput.lastname} className='form-control' />
                             <small className='text-danger'>{error.lastname}</small>
                       </div>
                       </div>
                       <div className='col-md-6'>
                          <div className='form-group mb-3'>
                             <label> Phone Number </label>
                             <input type='text' name='phone' onChange={handleInput}  value={checkoutInput.phone} className='form-control' />
                             <small className='text-danger'>{error.phone}</small>
                          </div>
                       </div>
                       <div className='col-md-6'>
                          <div className='form-group mb-3'>
                             <label> Email Address </label>
                             <input type='email' name='email' onChange={handleInput}  value={checkoutInput.email} className='form-control' />
                             <small className='text-danger'>{error.email}</small>
                          </div>
                       </div>
                       <div className='col-md-12'>
                          <div className='form-group mb-3'>
                             <label> full Address </label>
                             <input type='text' name='address' onChange={handleInput}  value={checkoutInput.address} className='form-control' />
                             <small className='text-danger'>{error.address}</small>
                          </div>
                       </div>
                       <div className='col-md-4'>
                          <div className='form-group mb-3'>
                             <label> City </label>
                             <input type='text' name='city' onChange={handleInput}  value={checkoutInput.city} className='form-control' />
                             <small className='text-danger'>{error.city}</small>
                          </div>
                       </div>
                       <div className='col-md-4'>
                          <div className='form-group mb-3'>
                             <label> State </label>
                             <input type='text' name='state' onChange={handleInput}  value={checkoutInput.state} className='form-control' />
                             <small className='text-danger'>{error.state}</small>
                          </div>
                       </div>
                       <div className='col-md-4'>
                          <div className='form-group mb-3'>
                             <label> Zip Code </label>
                             <input type='text' name='zipcode' onChange={handleInput}  value={checkoutInput.zipcode} className='form-control' />
                             <small className='text-danger'>{error.zipcode}</small>
                          </div>
                       </div>
                       <div className='col-md-12'>
                          <div className='form-group text-end'>
                             <button type='button' onClick={(e)=>submitOrder(e,'cod')} className="placeorder mr-2 mt-2">Place Order</button>
                             <button type='button' onClick={(e)=>submitOrder(e,'razorpay')} className="placeorder mr-2 mt-2">PayOrRaz</button>
                             <button type='button' onClick={(e)=>submitOrder(e,'payonline')} className="placeorder mr-2 mt-2">Pay Online</button>
                          </div>
                       </div>
                   </div>
                  
               </div>
               <div className='col-md-5'>
                  <table className='table table-bordered'>
                      <thead>
                          <tr>
                              <th width="50%">Product</th>
                              <th>Qty</th>
                              <th>Price</th>
                              <th>Total</th>
                          </tr>
                      </thead>
                      <tbody>
                          {cartItems}
                          <tr>
                            <td colSpan="2" className='grandtotal text-end'>Grand Total</td>
                            <td colSpan="2" className='grandtotal text-end'>{total()}</td>
                          </tr>
                      </tbody>
                  </table>
               </div>
           </div>
         </div>
         ):(
            <div className='noitem'>
                <h4> Your Shopping Cart Is Empty </h4>
            </div>
           )
       }
      </div>
      </>
  );
}

export default Checkout;